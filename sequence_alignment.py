from collections import defaultdict

def find_common_patterns(strings):
    """
    Counts the frequency of each pattern
    
    Args:
        strings (list of str): All the amino acid sequences

    Returns:
        dict: In the format {pattern: frequency}
    """

    def generate_substrings(s):
        """Generate all substrings of a given string."""
        substrings = set()
        for i in range(len(s)):
            for j in range(i + 1, len(s) + 1):
                substrings.add(s[i:j])
        return substrings

    substring_count = defaultdict(int)

    for string in strings:
        substrings = generate_substrings(string)
        for substring in substrings:
            substring_count[substring] += 1

    common_patterns = {k: v for k, v in substring_count.items() if v > 1}

    return common_patterns

def find_longest_pattern_with_min_frequency(patterns, frequency):
    """Finds longest pattern with a minimum frequency"""
    longest_pattern = max(
        (pattern for pattern, freq in patterns.items() if freq >= frequency),
        key=len,
        default=None
    )
    return longest_pattern

def find_patterns_with_min_length_and_frequency(patterns, min_length, min_frequency):
    """Returns list of patterns (str) with a minimum length & frequency"""
    matching_patterns = [
        pattern for pattern, freq in patterns.items()
        if len(pattern) >= min_length and freq >= min_frequency
    ]
    return matching_patterns

sequences = ["MNKLRQSFRRKKDVYVPEASRPHQWQTDEEGVRTGKCSFPVKYLGHVEVDICEDAVKRLKAERKFFKGFFGKTGKKAVKAVLWVSADGLRVVDEKTKDLIVDQTIEKVSFCAPDRNFDRAFSYICRDGTTRRWICHCFMAVKDTGERLSHAVGCAFAACLERKQKREKECGVTATFDASRTTFTREGSFRVTTATEQAEREEIMKQMQDAKKAETDKIVVGSSVAPGNTAPSPSSPTSPTSDATTSLEMNNPHAIPRRHAPIEQLARQGSFRGFPALSQKMSPFKRQLSLRINELPSTMQRKTDFPIKNAVPEVEGEAESISSLCSQITNAFSTPEDPFSSAPMTKPVTVVAPQSPTFQANGTDSAFHVLAKPAHTALAPVAMPVRETNPWAHAPDAANKEIAATCSGTEWGQSSGAASPGLFQAGHRRTPSEADRWLEEVSKSVRAQQPQASAAPLQPVLQPPPPTAISQPASPFQGNAFLTSQPVPVGVVPALQPAFVPAQSYPVANGMPYPAPNVPVVGITPSQMVANVFGTAGHPQAAHPHQSPSLVRQQTFPHYEASSATTSPFFKPPAQHLNGSAAFNGVDDGRLASADRHTEVPTGTCPVDPFEAQWAALENKSKQRTNPSPTNPFSSDLQKTFEIEL",
"MWILALSLFQSFANVFSEDLHSSLYFVNASLQEVVFASTTGTLVPCPAAGIPPVTLRWYLATGEEIYDVPGIRHVHPNGTLQIFPFPPSSFSTLIHDNTYYCTAENPSGKIRSQDVHIKAVLREPYTVRVEDQKTMRGNVAVFKCIIPSSVEAYITVVSWEKDTVSLVSGSRFLITSTGALYIKDVQNEDGLYNYRCITRHRYTGETRQSNSARLFVSDPANSAPSILDGFDHRKAMAGQRVELPCKALGHPEPDYRWLKDNMPLELSGRFQKTVTGLLIENIRPSDSGSYVCEVSNRYGTAKVIGRLYVKQPLKATISPRKVKSSVGSQVSLSCSVTGTEDQELSWYRNGEILNPGKNVRITGINHENLIMDHMVKSDGGAYQCFVRKDKLSAQDYVQVVLEDGTPKIISAFSEKVVSPAEPVSLMCNVKGTPLPTITWTLDDDPILKGGSHRISQMITSEGNVVSYLNISSSQVRDGGVYRCTANNSAGVVLYQARINVRGPASIRPMKNITAIAGRDTYIHCRVIGYPYYSIKWYKNSNLLPFNHRQVAFENNGTLKLSDVQKEVDEGEYTCNVLVQPQLSTSQSVHVTVKVPPFIQPFEFPRFSIGQRVFIPCVVVSGDLPITITWQKDGRPIPGSLGVTIDNIDFTSSLRISNLSLMHNGNYTCIARNEAAAVEHQSQLIVRVPPKFVVQPRDQDGIYGKAVILNCSAEGYPVPTIVWKFSKGAGVPQFQPIALNGRIQVLSNGSLLIKHVVEEDSGYYLCKVSNDVGADVSKSMYLTVKIPAMITSYPNTTLATQGQKKEMSCTAHGEKPIIVRWEKEDRIINPEMARYLVSTKEVGEEVISTLQILPTVREDSGFFSCHAINSYGEDRGIIQLTVQEPPDPPEIEIKDVKARTITLRWTMGFDGNSPITGYDIECKNKSDSWDSAQRTKDVSPQLNSATIIDIHPSSTYSIRMYAKNRIGKSEPSNELTITADEAAPDGPPQEVHLEPISSQSIRVTWKAPKKHLQNGIIRGYQIGYREYSTGGNFQFNIISVDTSGDSEVYTLDNLNKFTQYGLVVQACNRAGTGPSSQEIITTTLEDVPSYPPENVQAIATSPESISISWSTLSKEALNGILQGFRVIYWANLMDGELGEIKNITTTQPSLELDGLEKYTNYSIQVLAFTRAGDGVRSEQIFTRTKEDVPGPPAGVKAAAASASMVFVSWLPPLKLNGIIRKYTVFCSHPYPTVISEFEASPDSFSYRIPNLSRNRQYSVWVVAVTSAGRGNSSEIITVEPLAKAPARILTFSGTVTTPWMKDIVLPCKAVGDPSPAVKWMKDSNGTPSLVTIDGRRSIFSNGSFIIRTVKAEDSGYYSCIANNNWGSDEIILNLQVQVPPDQPRLTVSKTTSSSITLSWLPGDNGGSSIRGYILQYSEDNSEQWGSFPISPSERSYRLENLKCGTWYKFTLTAQNGVGPGRISEIIEAKTLGKEPQFSKEQELFASINTTRVRLNLIGWNDGGCPITSFTLEYRPFGTTVWTTAQRTSLSKSYILYDLQEATWYELQMRVCNSAGCAEKQANFATLNYDGSTIPPLIKSVVQNEEGLTTNEGLKMLVTISCILVGVLLLFVLLLVVRRRRREQRLKRLRDAKSLAEMLMSKNTRTSDTLSKQQQTLRMHIDIPRAQLLIEERDTMETIDDRSTVLLTDADFGEAAKQKSLTVTHTVHYQSVSQATGPLVDVSDARPGTNPTTRRNAKAGPTARNRYASQWTLNRPHPTISAHTLTTDWRLPTPRAAGSVDKESDSYSVSPSQDTDRARSSMVSTESASSTYEELARAYEHAKMEEQLRHAKFTITECFISDTSSEQLTAGTNEYTDSLTSSTPSESGICRFTASPPKPQDGGRVMNMAVPKAHRPGDLIHLPPYLRMDFLLNRGGPGTSRDLSLGQACLEPQKSRTLKRPTVLEPIPMEAASSASSTREGQSWQPGAVATLPQREGAELGQAAKMSSSQESLLDSRGHLKGNNPYAKSYTLV",
"MEEGSSSPVSPVDSLGTSEEELERQPKRFGRKRRYSKKSSEDGSPTPGKRGKKGSPSAQSFEELQSQRILANVRERQRTQSLNEAFAALRKIIPTLPSDKLSKIQTLKLAARYIDFLYQVLQSDEMDNKMTSCSYVAHERLSYAFSVWRMEGAWSMSASH",
"MSTFGYRRGLSKYESIDEDELLASLSAEELKELERELEDIEPDRNLPVGLRQKSLTEKTPTGTFSREALMAYWEKESQKLLEKERLGECGKVAEDKEESEEELIFTESNSEVSEEVYTEEEEEESQEEEEEEDSDEEERTIETAKGINGTVNYDSVNSDNSKPKIFKSQIENINLTNGSNGRNTESPAAIHPCGNPTVIEDALDKIKSNDPDTTEVNLNNIENITTQTLTRFAEALKDNTVVKTFSLANTHADDSAAMAIAEMLKVNEHITNVNVESNFITGKGILAIMRALQHNTVLTELRFHNQRHIMGSQVEMEIVKLLKENTTLLRLGYHFELPGPRMSMTSILTRNMDKQRQKRLQEQKQQEGYDGGPNLRTKVWQRGTPSSSPYVSPRHSPWSSPKLPKKVQTVRSRPLSPVATPPPPPPPPPPPPPSSQRLPPPPPPPPPPLPEKKLITRNIAEVIKQQESAQRALQNGQKKKKGKKVKKQPNSILKEIKNSLRSVQEKKMEDSSRPSTPQRSAHENLMEAIRGSSIKQLKRVEVPEALR",
"MAAPEERDLTQEQTEKLLQFQDLTGIESMDQCRHTLEQHNWNIEAAVQDRLNEQEGVPSVFNPPPSRPLQVNTADHRIYSYVVSRPQPRGLLGWGYYLIMLPFRFTYYTILDIFRFALRFIRPDPRSRVTDPVGDIVSFMHSFEEKYGRAHPVFYQGTYSQALNDAKRELRFLLVYLHGDDHQDSDEFCRNTLCAPEVISLINTRMLFWACSTNKPEGYRVSQALRENTYPFLAMIMLKDRRMTVVGRLEGLIQPDDLINQLTFIMDANQTYLVSERLEREERNQTQVLRQQQDEAYLASLRADQEKERKKREERERKRRKEEEVQQQKLAEERRRQNLQEEKERKLECLPPEPSPDDPESVKIIFKLPNDSRVERRFHFSQSLTVIHDFLFSLKESPEKFQIEANFPRRVLPCIPSEEWPNPPTLQEAGLSHTEVLFVQDLTDE",
"MSRSAAASGGPRRPERHLPPAPCGAPGPPETCRTEPDGAGTMNKLRQSLRRRKPAYVPEASRPHQWQADEDAVRKGTCSFPVRYLGHVEVEESRGMHVCEDAVKKLKAMGRKSVKSVLWVSADGLRVVDDKTKDLLVDQTIEKVSFCAPDRNLDKAFSYICRDGTTRRWICHCFLALKDSGERLSHAVGCAFAACLERKQRREKECGVTAAFDASRTSFAREGSFRLSGGGRPAEREAPDKKKAEAAAAPTVAPGPAQPGHVSPTPATTSPGEKGEAGTPVAAGTTAAAIPRRHAPLEQLVRQGSFRGFPALSQKNSPFKRQLSLRLNELPSTLQRRTDFQVKGTVPEMEPPGAGDSDSINALCTQISSSFASAGAPAPGPPPATTGTSAWGEPSVPPAAAFQPGHKRTPSEAERWLEEVSQVAKAQQQQQQQQQQQQQQQQQQQQAASVAPVPTMPPALQPFPAPVGPFDAAPAQVAVFLPPPHMQPPFVPAYPGLGYPPMPRVPVVGITPSQMVANAFCSAAQLQPQPATLLGKAGAFPPPAIPSAPGSQARPRPNGAPWPPEPAPAPAPELDPFEAQWAALEGKATVEKPSNPFSGDLQKTFEIEL",
"MKRGGRDSDRNSSEEGTAEKSKKLRTTNEHSQTCDWGNLLQDIILQVFKYLPLLDRAHASQVCRNWNQVFHMPDLWRCFEFELNQPATSYLKATHPELIKQIIKRHSNHLQYVSFKVDSSKESAEAACDILSQLVNCSLKTLGLISTARPSFMDLPKSHFISALTVVFVNSKSLSSLKIDDTPVDDPSLKVLVANNSDTLKLLKMSSCPHVSPAGILCVADQCHGLRELALNYHLLSDELLLALSSEKHVRLEHLRIDVVSENPGQTHFHTIQKSSWDAFIRHSPKVNLVMYFFLYEEEFDPFFRYEIPATHLYFGRSVSKDVLGRVGMTCPRLVELVVCANGLRPLDEELIRIAERCKNLSAIGLGECEVSCSAFVEFVKMCGGRLSQLSIMEEVLIPDQKYSLEQIHWEVSKHLGRVWFPDMMPTW",
"MSSQELVTLNVGGKIFTTRFSTIKQFPASRLARMLDGRDQEFKMVGGQIFVDRDGDLFSFILDFLRTHQLLLPTEFSDYLRLQREALFYELRSLVDLLNPYLLQPRPALVEVHFLSRNTQAFFRVFGSCSKTIEMLTGRITVFTEQPSAPTWNGNFFPPQMTLLPLPPQRPSYHDLVFQCGSDSTTDNQTGVRYVSIKPDNRKLANGTNVLGLLIDTLLKEGFHLVSTRTVSSEDKTECYSFERIKSPEVLITNETPKPETIIIPEQSQIKK",
"MNQELLSVGSKRRRTGGSLRGNPSSSQVDEEQMNRVVEEEQQQQLRQQEEEHTARNGEVVGVEPRPGGQNDSQQGQLEENNNRFISVDEDSSGNQEEQEEDEEHAGEQDEEDEEEEEMDQESDDFDQSDDSSREDEHTHTNSVTNSSSIVDLPVHQLSSPFYTKTTKMKRKLDHGSEVRSFSLGKKPCKVSEYTSTTGLVPCSATPTTFGDLRAANGQGQQRRRITSVQPPTGLQEWLKMFQSWSGPEKLLALDELIDSCEPTQVKHMMQVIEPQFQRDFISLLPKELALYVLSFLEPKDLLQAAQTCRYWRILAEDNLLWREKCKEEGIDEPLHIKRRKVIKPGFIHSPWKSAYIRQHRIDTNWRRGELKSPKVLKGHDDHVITCLQFCGNRIVSGSDDNTLKVWSAVTGKCLRTLVGHTGGVWSSQMRDNIIISGSTDRTLKVWNAETGECIHTLYGHTSTVRCMHLHEKRVVSGSRDATLRVWDIETGQCLHVLMGHVAAVRCVQYDGRRVVSGAYDFMVKVWDPETETCLHTLQGHTNRVYSLQFDGIHVVSGSLDTSIRVWDVETGNCIHTLTGHQSLTSGMELKDNILVSGNADSTVKIWDIKTGQCLQTLQGPNKHQSAVTCLQFNKNFVITSSDDGTVKLWDLKTGEFIRNLVTLESGGSGGVVWRIRASNTKLVCAVGSRNGTEETKLLVLDFDVDMK",
"MSEQSKDLSDPNFAAEAPNSEVHSSPGVSEGVPPSATLAEPQSPPLGPTAAPQAAPPPQAPNDEGDPKALQQAAEEGRAHQAPSAAQPGPAPPAPAQLVQKAHELMWYVLVKDQKKMIIWFPDMVKDVIGSYKKWCRSILRRTSLILARVFGLHLRLTSLHTMEFALVKALEPEELDRVALSNRMPMTGLLLMILSLIYVKGRGARESAVWNVLRILGLRPWKKHSTFGDVRKLITEEFVQMNYLKYQRVPYVEPPEYEFFWGSRASREITKMQIMEFLARVFKKDPQAWPSRYREALEEARALREANPTAHYPRSSVSED"
]

patterns = find_common_patterns(sequences)

length = int(input("Minimum Length: "))
frequency = int(input("Minimum Frequency: "))

longest_pattern = find_longest_pattern_with_min_frequency(patterns, frequency)
print("Longest pattern:", longest_pattern)

patterns_with_min_criteria = find_patterns_with_min_length_and_frequency(patterns, length, frequency)
print(f"Patterns with length >= {length} and frequency > {frequency}:", patterns_with_min_criteria)
print("Number of Elements:", len(patterns_with_min_criteria))

